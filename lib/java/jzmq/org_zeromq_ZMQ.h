/* DO NOT EDIT THIS FILE - it is machine generated */
/*
    Copyright (c) 2007-2013 iMatix Corporation

    This file is part of 0MQ.

    0MQ is free software; you can redistribute it and/or modify it under
    the terms of the Lesser GNU General Public License as published by
    the Free Software Foundation; either version 3 of the License, or
    (at your option) any later version.

    0MQ is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    Lesser GNU General Public License for more details.

    You should have received a copy of the Lesser GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include <jni.h>
/* Header for class org_zeromq_ZMQ */

#ifndef _Included_org_zeromq_ZMQ
#define _Included_org_zeromq_ZMQ
#ifdef __cplusplus
extern "C" {
#endif
#undef org_zeromq_ZMQ_NOBLOCK
#define org_zeromq_ZMQ_NOBLOCK 1L
#undef org_zeromq_ZMQ_DONTWAIT
#define org_zeromq_ZMQ_DONTWAIT 1L
#undef org_zeromq_ZMQ_SNDMORE
#define org_zeromq_ZMQ_SNDMORE 2L
#undef org_zeromq_ZMQ_PAIR
#define org_zeromq_ZMQ_PAIR 0L
#undef org_zeromq_ZMQ_PUB
#define org_zeromq_ZMQ_PUB 1L
#undef org_zeromq_ZMQ_SUB
#define org_zeromq_ZMQ_SUB 2L
#undef org_zeromq_ZMQ_REQ
#define org_zeromq_ZMQ_REQ 3L
#undef org_zeromq_ZMQ_REP
#define org_zeromq_ZMQ_REP 4L
#undef org_zeromq_ZMQ_DEALER
#define org_zeromq_ZMQ_DEALER 5L
#undef org_zeromq_ZMQ_XREQ
#define org_zeromq_ZMQ_XREQ 5L
#undef org_zeromq_ZMQ_ROUTER
#define org_zeromq_ZMQ_ROUTER 6L
#undef org_zeromq_ZMQ_XREP
#define org_zeromq_ZMQ_XREP 6L
#undef org_zeromq_ZMQ_PULL
#define org_zeromq_ZMQ_PULL 7L
#undef org_zeromq_ZMQ_PUSH
#define org_zeromq_ZMQ_PUSH 8L
#undef org_zeromq_ZMQ_XPUB
#define org_zeromq_ZMQ_XPUB 9L
#undef org_zeromq_ZMQ_XSUB
#define org_zeromq_ZMQ_XSUB 10L
#undef org_zeromq_ZMQ_STREAMER
#define org_zeromq_ZMQ_STREAMER 1L
#undef org_zeromq_ZMQ_FORWARDER
#define org_zeromq_ZMQ_FORWARDER 2L
#undef org_zeromq_ZMQ_QUEUE
#define org_zeromq_ZMQ_QUEUE 3L
#undef org_zeromq_ZMQ_UPSTREAM
#define org_zeromq_ZMQ_UPSTREAM 7L
#undef org_zeromq_ZMQ_DOWNSTREAM
#define org_zeromq_ZMQ_DOWNSTREAM 8L
/*
 * Class:     org_zeromq_ZMQ
 * Method:    version_full
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_org_zeromq_ZMQ_version_1full
  (JNIEnv *, jclass);

/*
 * Class:     org_zeromq_ZMQ
 * Method:    version_major
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_org_zeromq_ZMQ_version_1major
  (JNIEnv *, jclass);

/*
 * Class:     org_zeromq_ZMQ
 * Method:    version_minor
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_org_zeromq_ZMQ_version_1minor
  (JNIEnv *, jclass);

/*
 * Class:     org_zeromq_ZMQ
 * Method:    version_patch
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_org_zeromq_ZMQ_version_1patch
  (JNIEnv *, jclass);

/*
 * Class:     org_zeromq_ZMQ
 * Method:    make_version
 * Signature: (III)I
 */
JNIEXPORT jint JNICALL Java_org_zeromq_ZMQ_make_1version
  (JNIEnv *, jclass, jint, jint, jint);

/*
 * Class:     org_zeromq_ZMQ
 * Method:    ENOTSUP
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_org_zeromq_ZMQ_ENOTSUP
  (JNIEnv *, jclass);

/*
 * Class:     org_zeromq_ZMQ
 * Method:    EPROTONOSUPPORT
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_org_zeromq_ZMQ_EPROTONOSUPPORT
  (JNIEnv *, jclass);

/*
 * Class:     org_zeromq_ZMQ
 * Method:    ENOBUFS
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_org_zeromq_ZMQ_ENOBUFS
  (JNIEnv *, jclass);

/*
 * Class:     org_zeromq_ZMQ
 * Method:    ENETDOWN
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_org_zeromq_ZMQ_ENETDOWN
  (JNIEnv *, jclass);

/*
 * Class:     org_zeromq_ZMQ
 * Method:    EADDRINUSE
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_org_zeromq_ZMQ_EADDRINUSE
  (JNIEnv *, jclass);

/*
 * Class:     org_zeromq_ZMQ
 * Method:    EADDRNOTAVAIL
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_org_zeromq_ZMQ_EADDRNOTAVAIL
  (JNIEnv *, jclass);

/*
 * Class:     org_zeromq_ZMQ
 * Method:    ECONNREFUSED
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_org_zeromq_ZMQ_ECONNREFUSED
  (JNIEnv *, jclass);

/*
 * Class:     org_zeromq_ZMQ
 * Method:    EINPROGRESS
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_org_zeromq_ZMQ_EINPROGRESS
  (JNIEnv *, jclass);

/*
 * Class:     org_zeromq_ZMQ
 * Method:    EHOSTUNREACH
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_org_zeromq_ZMQ_EHOSTUNREACH
  (JNIEnv *, jclass);

/*
 * Class:     org_zeromq_ZMQ
 * Method:    EMTHREAD
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_org_zeromq_ZMQ_EMTHREAD
  (JNIEnv *, jclass);

/*
 * Class:     org_zeromq_ZMQ
 * Method:    EFSM
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_org_zeromq_ZMQ_EFSM
  (JNIEnv *, jclass);

/*
 * Class:     org_zeromq_ZMQ
 * Method:    ENOCOMPATPROTO
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_org_zeromq_ZMQ_ENOCOMPATPROTO
  (JNIEnv *, jclass);

/*
 * Class:     org_zeromq_ZMQ
 * Method:    ETERM
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_org_zeromq_ZMQ_ETERM
  (JNIEnv *, jclass);

/*
 * Class:     org_zeromq_ZMQ
 * Method:    ENOTSOCK
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_org_zeromq_ZMQ_ENOTSOCK
  (JNIEnv *, jclass);

/*
 * Class:     org_zeromq_ZMQ
 * Method:    run_proxy
 * Signature: (Lorg/zeromq/ZMQ/Socket;Lorg/zeromq/ZMQ/Socket;Lorg/zeromq/ZMQ/Socket;)V
 */
JNIEXPORT void JNICALL Java_org_zeromq_ZMQ_run_1proxy
  (JNIEnv *, jclass, jobject, jobject, jobject);

#ifdef __cplusplus
}
#endif
#endif
